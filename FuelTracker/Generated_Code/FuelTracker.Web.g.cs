//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17379
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FuelTracker
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using FuelTracker.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace FuelTracker.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using FuelTracker.Web.Resources;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("FuelTracker-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    /// <summary>
    /// The 'Car' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FuelTracker.Web")]
    public sealed partial class Car : Entity
    {
        
        private string _engine;
        
        private double _engineVolume;
        
        private EntityCollection<FuelTrack> _fuelTracks;
        
        private int _id;
        
        private string _manufacturer;
        
        private DateTime _manufacturingDate;
        
        private string _model;
        
        private string _name;
        
        private string _types;
        
        private EntityRef<UserProfile> _userProfile;
        
        private int _userProfileId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEngineChanging(string value);
        partial void OnEngineChanged();
        partial void OnEngineVolumeChanging(double value);
        partial void OnEngineVolumeChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnManufacturerChanging(string value);
        partial void OnManufacturerChanged();
        partial void OnManufacturingDateChanging(DateTime value);
        partial void OnManufacturingDateChanged();
        partial void OnModelChanging(string value);
        partial void OnModelChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTypesChanging(string value);
        partial void OnTypesChanged();
        partial void OnUserProfileIdChanging(int value);
        partial void OnUserProfileIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Car"/> class.
        /// </summary>
        public Car()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Engine' value.
        /// </summary>
        [DataMember()]
        public string Engine
        {
            get
            {
                return this._engine;
            }
            set
            {
                if ((this._engine != value))
                {
                    this.OnEngineChanging(value);
                    this.RaiseDataMemberChanging("Engine");
                    this.ValidateProperty("Engine", value);
                    this._engine = value;
                    this.RaiseDataMemberChanged("Engine");
                    this.OnEngineChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EngineVolume' value.
        /// </summary>
        [DataMember()]
        public double EngineVolume
        {
            get
            {
                return this._engineVolume;
            }
            set
            {
                if ((this._engineVolume != value))
                {
                    this.OnEngineVolumeChanging(value);
                    this.RaiseDataMemberChanging("EngineVolume");
                    this.ValidateProperty("EngineVolume", value);
                    this._engineVolume = value;
                    this.RaiseDataMemberChanged("EngineVolume");
                    this.OnEngineVolumeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="FuelTrack"/> entity instances.
        /// </summary>
        [Association("Car_FuelTrack", "Id", "CarId")]
        [XmlIgnore()]
        public EntityCollection<FuelTrack> FuelTracks
        {
            get
            {
                if ((this._fuelTracks == null))
                {
                    this._fuelTracks = new EntityCollection<FuelTrack>(this, "FuelTracks", this.FilterFuelTracks, this.AttachFuelTracks, this.DetachFuelTracks);
                }
                return this._fuelTracks;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Manufacturer' value.
        /// </summary>
        [DataMember()]
        public string Manufacturer
        {
            get
            {
                return this._manufacturer;
            }
            set
            {
                if ((this._manufacturer != value))
                {
                    this.OnManufacturerChanging(value);
                    this.RaiseDataMemberChanging("Manufacturer");
                    this.ValidateProperty("Manufacturer", value);
                    this._manufacturer = value;
                    this.RaiseDataMemberChanged("Manufacturer");
                    this.OnManufacturerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManufacturingDate' value.
        /// </summary>
        [DataMember()]
        public DateTime ManufacturingDate
        {
            get
            {
                return this._manufacturingDate;
            }
            set
            {
                if ((this._manufacturingDate != value))
                {
                    this.OnManufacturingDateChanging(value);
                    this.RaiseDataMemberChanging("ManufacturingDate");
                    this.ValidateProperty("ManufacturingDate", value);
                    this._manufacturingDate = value;
                    this.RaiseDataMemberChanged("ManufacturingDate");
                    this.OnManufacturingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Model' value.
        /// </summary>
        [DataMember()]
        public string Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    this.OnModelChanging(value);
                    this.RaiseDataMemberChanging("Model");
                    this.ValidateProperty("Model", value);
                    this._model = value;
                    this.RaiseDataMemberChanged("Model");
                    this.OnModelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Types' value.
        /// </summary>
        [DataMember()]
        public string Types
        {
            get
            {
                return this._types;
            }
            set
            {
                if ((this._types != value))
                {
                    this.OnTypesChanging(value);
                    this.RaiseDataMemberChanging("Types");
                    this.ValidateProperty("Types", value);
                    this._types = value;
                    this.RaiseDataMemberChanged("Types");
                    this.OnTypesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="UserProfile"/> entity.
        /// </summary>
        [Association("UserProfile_Car", "UserProfileId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public UserProfile UserProfile
        {
            get
            {
                if ((this._userProfile == null))
                {
                    this._userProfile = new EntityRef<UserProfile>(this, "UserProfile", this.FilterUserProfile);
                }
                return this._userProfile.Entity;
            }
            set
            {
                UserProfile previous = this.UserProfile;
                if ((previous != value))
                {
                    this.ValidateProperty("UserProfile", value);
                    if ((previous != null))
                    {
                        this._userProfile.Entity = null;
                        previous.Cars.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.UserProfileId = value.Id;
                    }
                    else
                    {
                        this.UserProfileId = default(int);
                    }
                    this._userProfile.Entity = value;
                    if ((value != null))
                    {
                        value.Cars.Add(this);
                    }
                    this.RaisePropertyChanged("UserProfile");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserProfileId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int UserProfileId
        {
            get
            {
                return this._userProfileId;
            }
            set
            {
                if ((this._userProfileId != value))
                {
                    this.OnUserProfileIdChanging(value);
                    this.RaiseDataMemberChanging("UserProfileId");
                    this.ValidateProperty("UserProfileId", value);
                    this._userProfileId = value;
                    this.RaiseDataMemberChanged("UserProfileId");
                    this.OnUserProfileIdChanged();
                }
            }
        }
        
        private void AttachFuelTracks(FuelTrack entity)
        {
            entity.Car = this;
        }
        
        private void DetachFuelTracks(FuelTrack entity)
        {
            entity.Car = null;
        }
        
        private bool FilterFuelTracks(FuelTrack entity)
        {
            return (entity.CarId == this.Id);
        }
        
        private bool FilterUserProfile(UserProfile entity)
        {
            return (entity.Id == this.UserProfileId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'FuelTrack' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FuelTracker.Web")]
    public sealed partial class FuelTrack : Entity
    {
        
        private EntityRef<Car> _car;
        
        private int _carId;
        
        private double _carMiliage;
        
        private DateTime _dateExpiration;
        
        private double _distance;
        
        private DateTime _fuelingDate;
        
        private int _id;
        
        private double _quantity;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCarIdChanging(int value);
        partial void OnCarIdChanged();
        partial void OnCarMiliageChanging(double value);
        partial void OnCarMiliageChanged();
        partial void OnDateExpirationChanging(DateTime value);
        partial void OnDateExpirationChanged();
        partial void OnDistanceChanging(double value);
        partial void OnDistanceChanged();
        partial void OnFuelingDateChanging(DateTime value);
        partial void OnFuelingDateChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnQuantityChanging(double value);
        partial void OnQuantityChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelTrack"/> class.
        /// </summary>
        public FuelTrack()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Car"/> entity.
        /// </summary>
        [Association("Car_FuelTrack", "CarId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Car Car
        {
            get
            {
                if ((this._car == null))
                {
                    this._car = new EntityRef<Car>(this, "Car", this.FilterCar);
                }
                return this._car.Entity;
            }
            set
            {
                Car previous = this.Car;
                if ((previous != value))
                {
                    this.ValidateProperty("Car", value);
                    if ((previous != null))
                    {
                        this._car.Entity = null;
                        previous.FuelTracks.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CarId = value.Id;
                    }
                    else
                    {
                        this.CarId = default(int);
                    }
                    this._car.Entity = value;
                    if ((value != null))
                    {
                        value.FuelTracks.Add(this);
                    }
                    this.RaisePropertyChanged("Car");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CarId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int CarId
        {
            get
            {
                return this._carId;
            }
            set
            {
                if ((this._carId != value))
                {
                    this.OnCarIdChanging(value);
                    this.RaiseDataMemberChanging("CarId");
                    this.ValidateProperty("CarId", value);
                    this._carId = value;
                    this.RaiseDataMemberChanged("CarId");
                    this.OnCarIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CarMiliage' value.
        /// </summary>
        [DataMember()]
        public double CarMiliage
        {
            get
            {
                return this._carMiliage;
            }
            set
            {
                if ((this._carMiliage != value))
                {
                    this.OnCarMiliageChanging(value);
                    this.RaiseDataMemberChanging("CarMiliage");
                    this.ValidateProperty("CarMiliage", value);
                    this._carMiliage = value;
                    this.RaiseDataMemberChanged("CarMiliage");
                    this.OnCarMiliageChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateExpiration' value.
        /// </summary>
        [DataMember()]
        public DateTime DateExpiration
        {
            get
            {
                return this._dateExpiration;
            }
            set
            {
                if ((this._dateExpiration != value))
                {
                    this.OnDateExpirationChanging(value);
                    this.RaiseDataMemberChanging("DateExpiration");
                    this.ValidateProperty("DateExpiration", value);
                    this._dateExpiration = value;
                    this.RaiseDataMemberChanged("DateExpiration");
                    this.OnDateExpirationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Distance' value.
        /// </summary>
        [DataMember()]
        public double Distance
        {
            get
            {
                return this._distance;
            }
            set
            {
                if ((this._distance != value))
                {
                    this.OnDistanceChanging(value);
                    this.RaiseDataMemberChanging("Distance");
                    this.ValidateProperty("Distance", value);
                    this._distance = value;
                    this.RaiseDataMemberChanged("Distance");
                    this.OnDistanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuelingDate' value.
        /// </summary>
        [DataMember()]
        public DateTime FuelingDate
        {
            get
            {
                return this._fuelingDate;
            }
            set
            {
                if ((this._fuelingDate != value))
                {
                    this.OnFuelingDateChanging(value);
                    this.RaiseDataMemberChanging("FuelingDate");
                    this.ValidateProperty("FuelingDate", value);
                    this._fuelingDate = value;
                    this.RaiseDataMemberChanged("FuelingDate");
                    this.OnFuelingDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Quantity' value.
        /// </summary>
        [DataMember()]
        public double Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    this.OnQuantityChanging(value);
                    this.RaiseDataMemberChanging("Quantity");
                    this.ValidateProperty("Quantity", value);
                    this._quantity = value;
                    this.RaiseDataMemberChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }
        
        private bool FilterCar(Car entity)
        {
            return (entity.Id == this.CarId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FuelTracker.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FuelTracker.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The 'UserProfile' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/FuelTracker.Web")]
    public sealed partial class UserProfile : Entity
    {
        
        private EntityCollection<Car> _cars;
        
        private string _city;
        
        private int _id;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserProfile"/> class.
        /// </summary>
        public UserProfile()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Car"/> entity instances.
        /// </summary>
        [Association("UserProfile_Car", "Id", "UserProfileId")]
        [XmlIgnore()]
        public EntityCollection<Car> Cars
        {
            get
            {
                if ((this._cars == null))
                {
                    this._cars = new EntityCollection<Car>(this, "Cars", this.FilterCars, this.AttachCars, this.DetachCars);
                }
                return this._cars;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
        
        private void AttachCars(Car entity)
        {
            entity.UserProfile = this;
        }
        
        private void DetachCars(Car entity)
        {
            entity.UserProfile = null;
        }
        
        private bool FilterCars(Car entity)
        {
            return (entity.UserProfileId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("FuelTracker-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
}
namespace FuelTracker.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using FuelTracker.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'FuelTrackerDomainService' DomainService.
    /// </summary>
    public sealed partial class FuelTrackerDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelTrackerDomainContext"/> class.
        /// </summary>
        public FuelTrackerDomainContext() : 
                this(new WebDomainClient<IFuelTrackerDomainServiceContract>(new Uri("FuelTracker-Web-Services-FuelTrackerDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelTrackerDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The FuelTrackerDomainService service URI.</param>
        public FuelTrackerDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IFuelTrackerDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="FuelTrackerDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public FuelTrackerDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Car"/> entity instances that have been loaded into this <see cref="FuelTrackerDomainContext"/> instance.
        /// </summary>
        public EntitySet<Car> Cars
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Car>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="FuelTrack"/> entity instances that have been loaded into this <see cref="FuelTrackerDomainContext"/> instance.
        /// </summary>
        public EntitySet<FuelTrack> FuelTracks
        {
            get
            {
                return base.EntityContainer.GetEntitySet<FuelTrack>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserProfile"/> entity instances that have been loaded into this <see cref="FuelTrackerDomainContext"/> instance.
        /// </summary>
        public EntitySet<UserProfile> UserProfiles
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserProfile>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Car"/> entity instances using the 'GetCars' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Car"/> entity instances.</returns>
        public EntityQuery<Car> GetCarsQuery()
        {
            this.ValidateMethod("GetCarsQuery", null);
            return base.CreateQuery<Car>("GetCars", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="FuelTrack"/> entity instances using the 'GetFuelTracks' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="FuelTrack"/> entity instances.</returns>
        public EntityQuery<FuelTrack> GetFuelTracksQuery()
        {
            this.ValidateMethod("GetFuelTracksQuery", null);
            return base.CreateQuery<FuelTrack>("GetFuelTracks", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserProfile"/> entity instances using the 'GetUserProfiles' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserProfile"/> entity instances.</returns>
        public EntityQuery<UserProfile> GetUserProfilesQuery()
        {
            this.ValidateMethod("GetUserProfilesQuery", null);
            return base.CreateQuery<UserProfile>("GetUserProfiles", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new FuelTrackerDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'FuelTrackerDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IFuelTrackerDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCars' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FuelTrackerDomainService/GetCarsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FuelTrackerDomainService/GetCars", ReplyAction="http://tempuri.org/FuelTrackerDomainService/GetCarsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCars(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCars'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCars'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCars' operation.</returns>
            QueryResult<Car> EndGetCars(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFuelTracks' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FuelTrackerDomainService/GetFuelTracksDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FuelTrackerDomainService/GetFuelTracks", ReplyAction="http://tempuri.org/FuelTrackerDomainService/GetFuelTracksResponse")]
            [WebGet()]
            IAsyncResult BeginGetFuelTracks(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFuelTracks'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFuelTracks'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFuelTracks' operation.</returns>
            QueryResult<FuelTrack> EndGetFuelTracks(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserProfiles' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FuelTrackerDomainService/GetUserProfilesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FuelTrackerDomainService/GetUserProfiles", ReplyAction="http://tempuri.org/FuelTrackerDomainService/GetUserProfilesResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserProfiles(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserProfiles'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserProfiles'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserProfiles' operation.</returns>
            QueryResult<UserProfile> EndGetUserProfiles(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/FuelTrackerDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/FuelTrackerDomainService/SubmitChanges", ReplyAction="http://tempuri.org/FuelTrackerDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class FuelTrackerDomainContextEntityContainer : EntityContainer
        {
            
            public FuelTrackerDomainContextEntityContainer()
            {
                this.CreateEntitySet<Car>(EntitySetOperations.All);
                this.CreateEntitySet<FuelTrack>(EntitySetOperations.All);
                this.CreateEntitySet<UserProfile>(EntitySetOperations.All);
            }
        }
    }
}
