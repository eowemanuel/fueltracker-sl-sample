<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="xaml.cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Diagnostics" #>
<# var modelType = (EnvDTE.CodeType)Model.ModelType;
 var viewName = Model.ViewName;
 var viewControlName = Model.ViewControlName;
 
 string viewModelName = Model.ViewModelName;
 string viewModelNameLowerFirstLetter = viewModelName.ToLower()[0] + viewModelName.Substring(1) ;
 
 string domainContext = Model.DomainContextName;
   
 string viewNamespace = Model.ViewNamespace;
 string defaultNamespace = Model.DefaultNamespace;
 
// string modelTypeNamespace = modelType.Namespace;
 string modelTypeName = modelType.Name;
 string modelTypeNameLowerFirstLetter = modelTypeName.ToLower()[0] + modelTypeName.Substring(1);
 string modelTypeNamePlural = Model.ModelTypeNamePlural;//modelTypeName + "s";
 string modelTypeNamePluralLowerFirstLetter = modelTypeNamePlural.ToLower()[0] + modelTypeNamePlural.Substring(1);

 string primaryKeyName = Model.PrimaryKeyName;//modelTypeName + "Id";
 string primaryKeyNameLowerFirstLetter = primaryKeyName.ToLower()[0] + primaryKeyName.Substring(1);
 
 var relatedEntities = ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>(); 

#>
using System.Windows;
using System.Windows.Controls;
using <#= defaultNamespace #>.Web;
using <#= defaultNamespace #>.ViewModels;
using GalaSoft.MvvmLight.Messaging;
using <#= defaultNamespace #>.Messages;
using <#= defaultNamespace #>.Web.Services;
using <#= defaultNamespace #>.Services;
using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace <#= viewNamespace #>
{
	public partial class <#= viewName #> : ChildWindow
	{
		public <#= viewName #>()
		{
			InitializeComponent();
			
			//TO DO: Assign SelectionChanged of ChildRelatedEntities grid to enable focus on selected items
			//ChildRelatedEntitiesDataGrid.SelectionChanged+=new SelectionChangedEventHandler(dataGrid_SelectionChanged);
		}

		#region SelectionChange Scrolling
		/// <summary>
		/// Scrolls to the selected item and the first column
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		void dataGrid_SelectionChanged(object sender, SelectionChangedEventArgs e)
		{
			var dataGrid = (DataGrid)sender;
			ScrollToSelectedItem(dataGrid);
		}

		/// <summary>
		/// Scrolls to the SelectedItem and first column of a given DataGrid
		/// This method must be used as an extension method to the DataGrid class
		/// </summary>
		/// <param name="dataGrid"></param>
		void ScrollToSelectedItem(DataGrid dataGrid)
		{
			if (dataGrid.SelectedItem == null)
			{
				return;
			}
			var itemToScrollTo = dataGrid.SelectedItem;
			var columnToScrolTo = dataGrid.Columns[0];
			dataGrid.ScrollIntoView(itemToScrollTo, columnToScrolTo);
		}
		#endregion

		public <#= viewName #>(int <#= primaryKeyNameLowerFirstLetter #>):this()
		{
			
			var <#= modelTypeNameLowerFirstLetter #>DataService = ServiceProvider.Instance.<#= modelTypeName #>DataService;
			
			//TO DO: Consider parent relations source (ex. are parent relations load manualy or from cached source for entire application). 
<#
									//Generates - Parent Related entities
									foreach(var relatedEntity in ParentRelations)
									{
										string relatedEntityTypeNamePlural = relatedEntity.RelatedEntityTypeNamePlural;
		
										string relatedEntityTypeName = relatedEntity.RelatedEntityType.Name;
										string relatedEntityTypeNameLowerFirstLetter = relatedEntityTypeName.ToLower()[0] + relatedEntityTypeName.Substring(1);
																																				   
										string relatedEntityTypePrimaryKeyName = relatedEntityTypeName + "Id";
										string relatedEntityTypePrimaryKeyNameLowerFirsLetter = relatedEntityTypePrimaryKeyName.ToLower()[0] + relatedEntityTypePrimaryKeyName.Substring(1);
		   
										//relatedEntity.RelationNamePlural 

										string relatedEntityCollectionName = relatedEntity.RelatedEntityTypeNamePlural;
										string relatedEntityCollectionNameLowerFirstLetter = relatedEntityCollectionName.ToLower()[0] + relatedEntityCollectionName.Substring(1);
		
#>
			IEnumerable<<#= relatedEntityTypeName #>> <#= relatedEntityCollectionNameLowerFirstLetter #> = new List<<#= relatedEntityTypeName #>>();
<#
									}
#>	
			<#= viewModelName #> <#= viewModelNameLowerFirstLetter #> = new <#= viewModelName #>(<#= primaryKeyNameLowerFirstLetter #>, <#= modelTypeNameLowerFirstLetter #>DataService<#
									//Generates - Parent Related entities
									foreach(var relatedEntity in ParentRelations)
									{
										string relatedEntityTypeNamePlural = relatedEntity.RelatedEntityTypeNamePlural;
		
										string relatedEntityTypeName = relatedEntity.RelatedEntityType.Name;
										string relatedEntityTypeNameLowerFirstLetter = relatedEntityTypeName.ToLower()[0] + relatedEntityTypeName.Substring(1);
																																				   
										string relatedEntityTypePrimaryKeyName = relatedEntityTypeName + "Id";
										string relatedEntityTypePrimaryKeyNameLowerFirsLetter = relatedEntityTypePrimaryKeyName.ToLower()[0] + relatedEntityTypePrimaryKeyName.Substring(1);
		   
										//relatedEntity.RelationNamePlural 

										string relatedEntityCollectionName = relatedEntity.RelatedEntityTypeNamePlural;
										string relatedEntityCollectionNameLowerFirstLetter = relatedEntityCollectionName.ToLower()[0] + relatedEntityCollectionName.Substring(1);
		
#>, <#= relatedEntityCollectionNameLowerFirstLetter #><#
									}
#>);
			this.DataContext = <#= viewModelNameLowerFirstLetter #>;
		}

		public <#= viewName #>(<#= modelTypeName #> <#= modelTypeNameLowerFirstLetter #>, <#= domainContext #> context)
			: this()
		{
			//<#= viewModelName #> <#= viewModelNameLowerFirstLetter #> = new <#= viewModelName #>( <#= modelTypeNameLowerFirstLetter #>.<#= primaryKeyName #>);
			//<#= viewModelName #> <#= viewModelNameLowerFirstLetter #> = new <#= viewModelName #>(context, <#= modelTypeNameLowerFirstLetter #>);
			//this.DataContext = <#= viewModelNameLowerFirstLetter #>;
		}

		private void RegisterMessages()
		{
			Messenger.Default.Register<Saved<#= modelTypeName #>DialogMessage>(this, OnSave<#= modelTypeName #>DialogMessageReceived);
		}

		private void OnSave<#= modelTypeName #>DialogMessageReceived(Saved<#= modelTypeName #>DialogMessage msg)
		{
			MessageBox.Show(msg.Content, msg.Caption, msg.Button);
		}

		private void OKButton_Click(object sender, RoutedEventArgs e)
		{
			//this.DialogResult = true;
		}

		private void CancelButton_Click(object sender, RoutedEventArgs e)
		{
			this.DialogResult = false;
		}

		private void OnChildWindowKeyDown(object sender, System.Windows.Input.KeyEventArgs e)
        {
            if (e.Key == System.Windows.Input.Key.Escape)
            {
                CancelButton_Click(sender, e);
            }
        }
	}
}



<#+
// Describes the information about a property on the model
class ModelProperty {
	public string Name { get; set; }
	public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
	public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
	typeof(string),
	typeof(decimal),
	typeof(Guid),
	typeof(DateTime),
	typeof(DateTimeOffset),
	typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
	
	foreach (ModelProperty prop in results) {
		if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
			prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
		}
		else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
			prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
		}
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
	}

	return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return propertyExpression;
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
	List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

	return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

//Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
	return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>
